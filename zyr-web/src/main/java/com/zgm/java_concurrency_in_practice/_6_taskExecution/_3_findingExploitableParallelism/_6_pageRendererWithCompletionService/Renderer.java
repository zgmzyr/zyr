/*
 * Copyright 2013 The JA-SIG Collaborative. All rights reserved.
 * distributed with this file and available online 
 */
package com.zgm.java_concurrency_in_practice._6_taskExecution._3_findingExploitableParallelism._6_pageRendererWithCompletionService;

import java.util.List;
import java.util.concurrent.Callable;
import java.util.concurrent.CompletionService;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorCompletionService;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Future;

import com.zgm.java_concurrency_in_practice._6_taskExecution._3_findingExploitableParallelism._1_sequentialPageRenderer.ImageData;
import com.zgm.java_concurrency_in_practice._6_taskExecution._3_findingExploitableParallelism._1_sequentialPageRenderer.ImageInfo;

/**
 * 
 * @author 周光明 Exp
 * @version $FileName: Renderer.java $Date: May 20, 2013 9:49:57 AM -0400 2013
 * @since 1.0
 * 
 */
public class Renderer {
    private final ExecutorService executor;

    Renderer(ExecutorService executor) { this.executor = executor; }

    void renderPage(CharSequence source) throws Exception {
        final List<ImageInfo> info = scanForImageInfo(source);
        CompletionService<ImageData> completionService =
            new ExecutorCompletionService<ImageData>(executor);
        for (final ImageInfo imageInfo : info)
            completionService.submit(new Callable<ImageData>() {
                 public ImageData call() {
                     return imageInfo.downloadImage();
                 }
            });

        renderText(source);

        try {
            for (int t = 0, n =  info.size(); t < n;  t++) {
                Future<ImageData> f = completionService.take();
                ImageData imageData = f.get();
                renderImage(imageData);
            }
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
        } catch (ExecutionException e) {
            throw launderThrowable(e.getCause());
        }
    }

	private Exception launderThrowable(Throwable cause) {
		//TODO
		return null;
	}

	private void renderImage(ImageData imageData) {
		//TODO
		
	}

	private void renderText(CharSequence source) {
		//TODO
		
	}

	private List<ImageInfo> scanForImageInfo(CharSequence source) {
		//TODO
		return null;
	}
}



