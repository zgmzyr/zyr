/*
 * Copyright 2013 The JA-SIG Collaborative. All rights reserved.
 * distributed with this file and available online 
 */
package com.zgm.java_concurrency_in_practice._6_taskExecution._3_findingExploitableParallelism._3_pageRendererWithFuture;

import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

import com.zgm.java_concurrency_in_practice._6_taskExecution._3_findingExploitableParallelism._1_sequentialPageRenderer.ImageData;
import com.zgm.java_concurrency_in_practice._6_taskExecution._3_findingExploitableParallelism._1_sequentialPageRenderer.ImageInfo;

/**
 * 
 * @author 周光明 Exp
 * @version $FileName: FutureRenderer.java $Date: May 20, 2013 9:22:30 AM -0400 2013
 * @since 1.0
 * 
 */
public class FutureRenderer {
	// private final ExecutorService executor = ...;
	private final ExecutorService executor = Executors.newCachedThreadPool();

	void renderPage(CharSequence source) throws Exception {
		final List<ImageInfo> imageInfos = scanForImageInfo(source);
		Callable<List<ImageData>> task = new Callable<List<ImageData>>() {
			public List<ImageData> call() {
				List<ImageData> result = new ArrayList<ImageData>();
				for (ImageInfo imageInfo : imageInfos) {
					result.add(imageInfo.downloadImage());
				}

				return result;
			}
		};

		Future<List<ImageData>> future = executor.submit(task);
		renderText(source);

		try {
			List<ImageData> imageData = future.get();
			for (ImageData data : imageData)
				renderImage(data);
		} catch (InterruptedException e) {
			// Re-assert the thread's interrupted status
			Thread.currentThread().interrupt();
			// We don't need the result, so cancel the task too
			future.cancel(true);
		} catch (ExecutionException e) {
			throw launderThrowable(e.getCause());
		}
	}

	private Exception launderThrowable(Throwable cause) {
		// TODO
		return null;
	}

	private void renderImage(ImageData data) {
		// TODO

	}

	private void renderText(CharSequence source) {
		// TODO

	}

	private List<ImageInfo> scanForImageInfo(CharSequence source) {
		// TODO
		return null;
	}
}
